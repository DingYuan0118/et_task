// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services.proto

package gomicroapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TcpServer service

func NewTcpServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TcpServer service

type TcpServerService interface {
	// Sends a greeting
	UserLogin(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*LoginReturn, error)
	UserQuery(ctx context.Context, in *UserQueryInfo, opts ...client.CallOption) (*QueryReturn, error)
	UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, opts ...client.CallOption) (*UpdateNicknameReturn, error)
	UploadPic(ctx context.Context, in *UploadPicInfo, opts ...client.CallOption) (*UpdatePicReturn, error)
}

type tcpServerService struct {
	c    client.Client
	name string
}

func NewTcpServerService(name string, c client.Client) TcpServerService {
	return &tcpServerService{
		c:    c,
		name: name,
	}
}

func (c *tcpServerService) UserLogin(ctx context.Context, in *UserLoginInfo, opts ...client.CallOption) (*LoginReturn, error) {
	req := c.c.NewRequest(c.name, "TcpServer.UserLogin", in)
	out := new(LoginReturn)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerService) UserQuery(ctx context.Context, in *UserQueryInfo, opts ...client.CallOption) (*QueryReturn, error) {
	req := c.c.NewRequest(c.name, "TcpServer.UserQuery", in)
	out := new(QueryReturn)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerService) UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, opts ...client.CallOption) (*UpdateNicknameReturn, error) {
	req := c.c.NewRequest(c.name, "TcpServer.UpdateNickname", in)
	out := new(UpdateNicknameReturn)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerService) UploadPic(ctx context.Context, in *UploadPicInfo, opts ...client.CallOption) (*UpdatePicReturn, error) {
	req := c.c.NewRequest(c.name, "TcpServer.UploadPic", in)
	out := new(UpdatePicReturn)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TcpServer service

type TcpServerHandler interface {
	// Sends a greeting
	UserLogin(context.Context, *UserLoginInfo, *LoginReturn) error
	UserQuery(context.Context, *UserQueryInfo, *QueryReturn) error
	UpdateNickname(context.Context, *UpdateNicknameInfo, *UpdateNicknameReturn) error
	UploadPic(context.Context, *UploadPicInfo, *UpdatePicReturn) error
}

func RegisterTcpServerHandler(s server.Server, hdlr TcpServerHandler, opts ...server.HandlerOption) error {
	type tcpServer interface {
		UserLogin(ctx context.Context, in *UserLoginInfo, out *LoginReturn) error
		UserQuery(ctx context.Context, in *UserQueryInfo, out *QueryReturn) error
		UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, out *UpdateNicknameReturn) error
		UploadPic(ctx context.Context, in *UploadPicInfo, out *UpdatePicReturn) error
	}
	type TcpServer struct {
		tcpServer
	}
	h := &tcpServerHandler{hdlr}
	return s.Handle(s.NewHandler(&TcpServer{h}, opts...))
}

type tcpServerHandler struct {
	TcpServerHandler
}

func (h *tcpServerHandler) UserLogin(ctx context.Context, in *UserLoginInfo, out *LoginReturn) error {
	return h.TcpServerHandler.UserLogin(ctx, in, out)
}

func (h *tcpServerHandler) UserQuery(ctx context.Context, in *UserQueryInfo, out *QueryReturn) error {
	return h.TcpServerHandler.UserQuery(ctx, in, out)
}

func (h *tcpServerHandler) UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, out *UpdateNicknameReturn) error {
	return h.TcpServerHandler.UpdateNickname(ctx, in, out)
}

func (h *tcpServerHandler) UploadPic(ctx context.Context, in *UploadPicInfo, out *UpdatePicReturn) error {
	return h.TcpServerHandler.UploadPic(ctx, in, out)
}
