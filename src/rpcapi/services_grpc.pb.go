// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: services.proto

package rpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TcpServerClient is the client API for TcpServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TcpServerClient interface {
	// Sends a greeting
	UserLogin(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*LoginReturn, error)
	UserQuery(ctx context.Context, in *UserQueryInfo, opts ...grpc.CallOption) (*QueryReturn, error)
	UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, opts ...grpc.CallOption) (*UpdateNicknameReturn, error)
	UploadPic(ctx context.Context, in *UploadPicInfo, opts ...grpc.CallOption) (*UpdatePicReturn, error)
}

type tcpServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTcpServerClient(cc grpc.ClientConnInterface) TcpServerClient {
	return &tcpServerClient{cc}
}

func (c *tcpServerClient) UserLogin(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*LoginReturn, error) {
	out := new(LoginReturn)
	err := c.cc.Invoke(ctx, "/rpcapi.TcpServer/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerClient) UserQuery(ctx context.Context, in *UserQueryInfo, opts ...grpc.CallOption) (*QueryReturn, error) {
	out := new(QueryReturn)
	err := c.cc.Invoke(ctx, "/rpcapi.TcpServer/UserQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerClient) UpdateNickname(ctx context.Context, in *UpdateNicknameInfo, opts ...grpc.CallOption) (*UpdateNicknameReturn, error) {
	out := new(UpdateNicknameReturn)
	err := c.cc.Invoke(ctx, "/rpcapi.TcpServer/UpdateNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpServerClient) UploadPic(ctx context.Context, in *UploadPicInfo, opts ...grpc.CallOption) (*UpdatePicReturn, error) {
	out := new(UpdatePicReturn)
	err := c.cc.Invoke(ctx, "/rpcapi.TcpServer/UploadPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcpServerServer is the server API for TcpServer service.
// All implementations must embed UnimplementedTcpServerServer
// for forward compatibility
type TcpServerServer interface {
	// Sends a greeting
	UserLogin(context.Context, *UserLoginInfo) (*LoginReturn, error)
	UserQuery(context.Context, *UserQueryInfo) (*QueryReturn, error)
	UpdateNickname(context.Context, *UpdateNicknameInfo) (*UpdateNicknameReturn, error)
	UploadPic(context.Context, *UploadPicInfo) (*UpdatePicReturn, error)
	mustEmbedUnimplementedTcpServerServer()
}

// UnimplementedTcpServerServer must be embedded to have forward compatible implementations.
type UnimplementedTcpServerServer struct {
}

func (UnimplementedTcpServerServer) UserLogin(context.Context, *UserLoginInfo) (*LoginReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedTcpServerServer) UserQuery(context.Context, *UserQueryInfo) (*QueryReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (UnimplementedTcpServerServer) UpdateNickname(context.Context, *UpdateNicknameInfo) (*UpdateNicknameReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNickname not implemented")
}
func (UnimplementedTcpServerServer) UploadPic(context.Context, *UploadPicInfo) (*UpdatePicReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPic not implemented")
}
func (UnimplementedTcpServerServer) mustEmbedUnimplementedTcpServerServer() {}

// UnsafeTcpServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcpServerServer will
// result in compilation errors.
type UnsafeTcpServerServer interface {
	mustEmbedUnimplementedTcpServerServer()
}

func RegisterTcpServerServer(s grpc.ServiceRegistrar, srv TcpServerServer) {
	s.RegisterService(&TcpServer_ServiceDesc, srv)
}

func _TcpServer_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TcpServer/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServerServer).UserLogin(ctx, req.(*UserLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpServer_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServerServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TcpServer/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServerServer).UserQuery(ctx, req.(*UserQueryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpServer_UpdateNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicknameInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServerServer).UpdateNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TcpServer/UpdateNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServerServer).UpdateNickname(ctx, req.(*UpdateNicknameInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpServer_UploadPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServerServer).UploadPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcapi.TcpServer/UploadPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServerServer).UploadPic(ctx, req.(*UploadPicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// TcpServer_ServiceDesc is the grpc.ServiceDesc for TcpServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TcpServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcapi.TcpServer",
	HandlerType: (*TcpServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _TcpServer_UserLogin_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _TcpServer_UserQuery_Handler,
		},
		{
			MethodName: "UpdateNickname",
			Handler:    _TcpServer_UpdateNickname_Handler,
		},
		{
			MethodName: "UploadPic",
			Handler:    _TcpServer_UploadPic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
